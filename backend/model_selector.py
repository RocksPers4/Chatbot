#!/usr/bin/env python3
"""
Selector de modelos para el chatbot ESPOCH.
Permite cambiar entre diferentes modelos de Hugging Face.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.chatbot import ChatbotService

def main():
    print("ü§ñ SELECTOR DE MODELOS - POCHIBOT")
    print("="*50)
    
    # Mostrar modelos disponibles
    print("\nModelos disponibles:")
    for key, config in ChatbotService.AVAILABLE_MODELS.items():
        print(f"\n{key}:")
        print(f"  üì¶ Modelo: {config['name']}")
        print(f"  üîß Tipo: {config['type']}")
        print(f"  üìù Descripci√≥n: {config['description']}")
    
    print(f"\nüéØ Modelo actual: {ChatbotService.CURRENT_MODEL}")
    
    while True:
        print("\n" + "-"*50)
        print("1. Cambiar modelo")
        print("2. Probar modelo actual")
        print("3. Ver informaci√≥n del modelo")
        print("4. Comparar modelos")
        print("0. Salir")
        
        choice = input("\nSelecciona una opci√≥n: ").strip()
        
        if choice == "1":
            change_model()
        elif choice == "2":
            test_current_model()
        elif choice == "3":
            show_model_info()
        elif choice == "4":
            compare_models()
        elif choice == "0":
            print("¬°Hasta luego!")
            break
        else:
            print("Opci√≥n no v√°lida.")

def change_model():
    """Cambia el modelo del chatbot."""
    print("\n--- CAMBIAR MODELO ---")
    
    print("Modelos disponibles:")
    models = list(ChatbotService.AVAILABLE_MODELS.keys())
    for i, model in enumerate(models, 1):
        config = ChatbotService.AVAILABLE_MODELS[model]
        print(f"{i}. {model} - {config['name']}")
    
    try:
        choice = int(input(f"\nSelecciona modelo (1-{len(models)}): "))
        if 1 <= choice <= len(models):
            selected_model = models[choice - 1]
            print(f"\nüîÑ Cambiando a {selected_model}...")
            
            result = ChatbotService.change_model(selected_model)
            print(f"‚úÖ {result}")
        else:
            print("‚ùå Opci√≥n no v√°lida.")
    except ValueError:
        print("‚ùå Debe ser un n√∫mero.")
    except Exception as e:
        print(f"‚ùå Error: {e}")

def test_current_model():
    """Prueba el modelo actual."""
    print("\n--- PROBAR MODELO ACTUAL ---")
    
    info = ChatbotService.get_model_info()
    print(f"ü§ñ Modelo: {info['nombre']}")
    print(f"üìù Descripci√≥n: {info['descripcion']}")
    print("\nEscribe 'salir' para volver al men√∫.")
    
    try:
        ChatbotService.initialize()
        
        # Preguntas de prueba sugeridas
        test_questions = [
            "¬øQu√© es la ESPOCH?",
            "¬øCu√°les son los requisitos para becas?",
            "¬øQu√© carreras hay disponibles?",
            "Hola, ¬øc√≥mo est√°s?"
        ]
        
        print("\nüí° Preguntas de prueba sugeridas:")
        for i, q in enumerate(test_questions, 1):
            print(f"{i}. {q}")
        
        while True:
            user_input = input("\nT√∫: ").strip()
            
            if user_input.lower() in ['salir', 'exit', 'quit']:
                break
            
            if not user_input:
                continue
            
            # Verificar si es un n√∫mero de pregunta sugerida
            try:
                if user_input.isdigit():
                    num = int(user_input)
                    if 1 <= num <= len(test_questions):
                        user_input = test_questions[num - 1]
                        print(f"Pregunta seleccionada: {user_input}")
            except:
                pass
            
            response = ChatbotService.get_response(user_input)
            print(f"PochiBot: {response}")
            
    except Exception as e:
        print(f"‚ùå Error al inicializar: {e}")

def show_model_info():
    """Muestra informaci√≥n detallada del modelo actual."""
    print("\n--- INFORMACI√ìN DEL MODELO ---")
    
    info = ChatbotService.get_model_info()
    
    print(f"üéØ Modelo actual: {info['modelo_actual']}")
    print(f"üì¶ Nombre completo: {info['nombre']}")
    print(f"üîß Tipo: {info['tipo']}")
    print(f"üìù Descripci√≥n: {info['descripcion']}")
    
    # Informaci√≥n adicional seg√∫n el tipo
    if info['tipo'] == 'seq2seq':
        print("\nüìã Caracter√≠sticas de modelos Seq2Seq:")
        print("‚Ä¢ Excelentes para tareas de generaci√≥n de texto")
        print("‚Ä¢ Pueden seguir instrucciones espec√≠ficas")
        print("‚Ä¢ Buenos para resumir y responder preguntas")
        print("‚Ä¢ Requieren prompts bien estructurados")
    elif info['tipo'] == 'causal':
        print("\nüìã Caracter√≠sticas de modelos Causales:")
        print("‚Ä¢ Especializados en conversaciones naturales")
        print("‚Ä¢ Generan texto de manera fluida")
        print("‚Ä¢ Buenos para di√°logos interactivos")
        print("‚Ä¢ Pueden mantener contexto conversacional")

def compare_models():
    """Compara diferentes modelos disponibles."""
    print("\n--- COMPARACI√ìN DE MODELOS ---")
    
    print("üìä Comparaci√≥n por caracter√≠sticas:\n")
    
    print("üéØ MEJOR PARA SEGUIR INSTRUCCIONES:")
    print("   1. flan_t5 - Excelente para tareas espec√≠ficas")
    print("   2. mt5 - Muy bueno multiling√ºe")
    print("   3. mbart - Bueno para generaci√≥n estructurada")
    
    print("\nüí¨ MEJOR PARA CONVERSACIONES NATURALES:")
    print("   1. blenderbot - Especializado en di√°logos")
    print("   2. spanish_gpt2 - Muy bueno en espa√±ol")
    print("   3. flan_t5 - Bueno siguiendo contexto")
    
    print("\nüåç MEJOR SOPORTE MULTILING√úE:")
    print("   1. mbart - Excelente multiling√ºe")
    print("   2. mt5 - Muy bueno multiling√ºe")
    print("   3. flan_t5 - Bueno en varios idiomas")
    
    print("\nüá™üá∏ MEJOR PARA ESPA√ëOL:")
    print("   1. spanish_gpt2 - Entrenado espec√≠ficamente en espa√±ol")
    print("   2. mbart - Muy bueno multiling√ºe")
    print("   3. mt5 - Bueno en espa√±ol")
    
    print("\n‚ö° VELOCIDAD Y EFICIENCIA:")
    print("   1. flan_t5 - R√°pido y eficiente")
    print("   2. spanish_gpt2 - Moderadamente r√°pido")
    print("   3. blenderbot - R√°pido para conversaci√≥n")
    
    print("\nüí° RECOMENDACIONES:")
    print("‚Ä¢ Para un chatbot universitario: flan_t5 o mt5")
    print("‚Ä¢ Para conversaciones casuales: blenderbot")
    print("‚Ä¢ Para espa√±ol espec√≠fico: spanish_gpt2")
    print("‚Ä¢ Para versatilidad: mbart")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n¬°Hasta luego!")
    except Exception as e:
        print(f"\nError inesperado: {e}")
