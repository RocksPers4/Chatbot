#!/usr/bin/env python3
"""
Script de administraci√≥n para la base de conocimiento del chatbot ESPOCH.
Permite gestionar preguntas y respuestas, validar conocimiento y ver estad√≠sticas.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.knowledge_manager import KnowledgeManager
from services.chatbot import ChatbotService
import json

def main_menu():
    """Muestra el men√∫ principal de administraci√≥n."""
    km = KnowledgeManager()
    
    while True:
        print("\n" + "="*50)
        print("ADMINISTRADOR DE CONOCIMIENTO - POCHIBOT")
        print("="*50)
        print("1. A√±adir nuevo conocimiento")
        print("2. Buscar conocimiento existente")
        print("3. Ver conocimiento no validado")
        print("4. Validar conocimiento")
        print("5. Ver estad√≠sticas")
        print("6. Exportar base de conocimiento")
        print("7. Importar conocimiento")
        print("8. Probar chatbot")
        print("9. A√±adir ejemplos de becas")
        print("0. Salir")
        print("-"*50)
        
        choice = input("Selecciona una opci√≥n: ").strip()
        
        if choice == "1":
            add_knowledge(km)
        elif choice == "2":
            search_knowledge(km)
        elif choice == "3":
            show_unvalidated(km)
        elif choice == "4":
            validate_knowledge(km)
        elif choice == "5":
            show_stats(km)
        elif choice == "6":
            export_knowledge(km)
        elif choice == "7":
            import_knowledge(km)
        elif choice == "8":
            test_chatbot()
        elif choice == "9":
            add_scholarship_examples(km)
        elif choice == "0":
            print("¬°Hasta luego!")
            break
        else:
            print("Opci√≥n no v√°lida. Intenta de nuevo.")

def add_knowledge(km):
    """A√±ade nuevo conocimiento a la base de datos."""
    print("\n--- A√ëADIR NUEVO CONOCIMIENTO ---")
    
    pregunta = input("Pregunta: ").strip()
    if not pregunta:
        print("La pregunta no puede estar vac√≠a.")
        return
    
    respuesta = input("Respuesta: ").strip()
    if not respuesta:
        print("La respuesta no puede estar vac√≠a.")
        return
    
    print("\nCategor√≠as disponibles:")
    print("1. becas")
    print("2. ayudas_economicas")
    print("3. carreras")
    print("4. tramites")
    print("5. horarios")
    print("6. general")
    
    cat_choice = input("Selecciona categor√≠a (1-6): ").strip()
    categorias = {
        "1": "becas",
        "2": "ayudas_economicas", 
        "3": "carreras",
        "4": "tramites",
        "5": "horarios",
        "6": "general"
    }
    categoria = categorias.get(cat_choice, "general")
    
    try:
        confianza = float(input("Confianza (0.0-1.0, default 1.0): ") or "1.0")
        confianza = max(0.0, min(1.0, confianza))
    except ValueError:
        confianza = 1.0
    
    success = km.add_knowledge(pregunta, respuesta, categoria, confianza, "admin")
    
    if success:
        print("‚úÖ Conocimiento a√±adido exitosamente!")
    else:
        print("‚ùå No se pudo a√±adir. Puede que ya exista una pregunta similar.")

def search_knowledge(km):
    """Busca conocimiento existente."""
    print("\n--- BUSCAR CONOCIMIENTO ---")
    
    query = input("Ingresa tu b√∫squeda: ").strip()
    if not query:
        print("La b√∫squeda no puede estar vac√≠a.")
        return
    
    result = km.get_answer(query, threshold=0.5)
    
    if result:
        print(f"\n‚úÖ RESULTADO ENCONTRADO:")
        print(f"Similitud: {result['similarity']:.2f}")
        print(f"Confianza: {result['confianza']:.2f}")
        print(f"Categor√≠a: {result['categoria']}")
        print(f"Respuesta: {result['respuesta']}")
    else:
        print("‚ùå No se encontraron resultados similares.")

def show_unvalidated(km):
    """Muestra conocimiento no validado."""
    print("\n--- CONOCIMIENTO NO VALIDADO ---")
    
    unvalidated = km.get_unvalidated_knowledge()
    
    if not unvalidated:
        print("‚úÖ Todo el conocimiento est√° validado.")
        return
    
    for i, item in enumerate(unvalidated, 1):
        print(f"\n{i}. ID: {item['id']}")
        print(f"   Pregunta: {item['pregunta']}")
        print(f"   Respuesta: {item['respuesta'][:100]}...")
        print(f"   Categor√≠a: {item['categoria']}")
        print(f"   Confianza: {item['confianza']}")
        print(f"   Fuente: {item['fuente']}")
        print(f"   Fecha: {item['fecha_creacion']}")

def validate_knowledge(km):
    """Valida o invalida conocimiento espec√≠fico."""
    print("\n--- VALIDAR CONOCIMIENTO ---")
    
    try:
        knowledge_id = int(input("ID del conocimiento a validar: "))
        action = input("¬øValidar? (s/n): ").lower().strip()
        
        if action in ['s', 'si', 'yes', 'y']:
            km.validate_knowledge(knowledge_id, True)
            print("‚úÖ Conocimiento validado.")
        elif action in ['n', 'no']:
            km.validate_knowledge(knowledge_id, False)
            print("‚ùå Conocimiento marcado como no v√°lido.")
        else:
            print("Acci√≥n no reconocida.")
            
    except ValueError:
        print("ID debe ser un n√∫mero.")
    except Exception as e:
        print(f"Error: {e}")

def show_stats(km):
    """Muestra estad√≠sticas de la base de conocimiento."""
    print("\n--- ESTAD√çSTICAS DE LA BASE DE CONOCIMIENTO ---")
    
    stats = km.get_knowledge_stats()
    
    if stats:
        general = stats.get('general', {})
        print(f"üìä ESTAD√çSTICAS GENERALES:")
        print(f"   Total de entradas: {general.get('total', 0)}")
        print(f"   Validadas: {general.get('validados', 0)}")
        print(f"   Activas: {general.get('activos', 0)}")
        print(f"   Confianza promedio: {general.get('confianza_promedio', 0):.2f}")
        print(f"   Categor√≠as: {general.get('categorias', 0)}")
        
        categories = stats.get('por_categoria', [])
        if categories:
            print(f"\nüìà POR CATEGOR√çA:")
            for cat in categories:
                print(f"   {cat['categoria']}: {cat['cantidad']} entradas")
    else:
        print("‚ùå No se pudieron obtener estad√≠sticas.")

def export_knowledge(km):
    """Exporta la base de conocimiento."""
    print("\n--- EXPORTAR BASE DE CONOCIMIENTO ---")
    
    filename = input("Nombre del archivo (opcional): ").strip()
    
    exported_file = km.export_knowledge(filename if filename else None)
    
    if exported_file:
        print(f"‚úÖ Base de conocimiento exportada a: {exported_file}")
    else:
        print("‚ùå Error al exportar.")

def import_knowledge(km):
    """Importa conocimiento desde un archivo."""
    print("\n--- IMPORTAR CONOCIMIENTO ---")
    
    filename = input("Ruta del archivo a importar: ").strip()
    
    if not os.path.exists(filename):
        print("‚ùå El archivo no existe.")
        return
    
    imported_count = km.import_knowledge(filename)
    
    if imported_count > 0:
        print(f"‚úÖ Se importaron {imported_count} entradas de conocimiento.")
    else:
        print("‚ùå No se pudo importar conocimiento.")

def test_chatbot():
    """Prueba el chatbot interactivamente."""
    print("\n--- PROBAR CHATBOT ---")
    print("Escribe 'salir' para volver al men√∫ principal.")
    
    ChatbotService.initialize()
    
    while True:
        user_input = input("\nT√∫: ").strip()
        
        if user_input.lower() in ['salir', 'exit', 'quit']:
            break
        
        if not user_input:
            continue
        
        response = ChatbotService.get_response(user_input)
        print(f"PochiBot: {response}")

def add_scholarship_examples(km):
    """A√±ade ejemplos predefinidos sobre becas."""
    print("\n--- A√ëADIR EJEMPLOS DE BECAS ---")
    
    ejemplos_becas = [
        {
            "pregunta": "¬øCu√°les son los requisitos para la beca de excelencia acad√©mica?",
            "respuesta": "Para la beca de excelencia acad√©mica necesitas:\n\n‚Ä¢ Promedio m√≠nimo de 8.5 puntos\n‚Ä¢ No tener materias perdidas o reprobadas\n‚Ä¢ Presentar certificado de notas actualizado\n‚Ä¢ Carta de motivaci√≥n explicando por qu√© mereces la beca\n‚Ä¢ Certificado de matr√≠cula vigente\n‚Ä¢ Copia de c√©dula de identidad\n\nLa documentaci√≥n debe presentarse en el Departamento de Bienestar Estudiantil.",
            "categoria": "becas"
        },
        {
            "pregunta": "¬øCu√°ndo abren las convocatorias de becas en la ESPOCH?",
            "respuesta": "Las convocatorias de becas en la ESPOCH Sede Orellana se abren:\n\n‚Ä¢ Primer semestre: Marzo - Abril\n‚Ä¢ Segundo semestre: Agosto - Septiembre\n\nTe recomendamos:\n‚Ä¢ Estar atento a las publicaciones oficiales\n‚Ä¢ Seguir las redes sociales de la ESPOCH\n‚Ä¢ Consultar regularmente en Bienestar Estudiantil\n‚Ä¢ Preparar tu documentaci√≥n con anticipaci√≥n",
            "categoria": "becas"
        },
        {
            "pregunta": "¬øQu√© tipos de becas ofrece la ESPOCH Sede Orellana?",
            "respuesta": "La ESPOCH Sede Orellana ofrece varios tipos de becas:\n\n‚Ä¢ Beca de Excelencia Acad√©mica (para estudiantes destacados)\n‚Ä¢ Beca Socioecon√≥mica (para estudiantes de bajos recursos)\n‚Ä¢ Beca Deportiva (para atletas destacados)\n‚Ä¢ Beca Cultural (para estudiantes con talentos art√≠sticos)\n‚Ä¢ Beca de Investigaci√≥n (para proyectos de investigaci√≥n)\n\nCada beca tiene requisitos espec√≠ficos y diferentes porcentajes de cobertura.",
            "categoria": "becas"
        },
        {
            "pregunta": "¬øC√≥mo puedo aplicar a una beca en la ESPOCH?",
            "respuesta": "Para aplicar a una beca en la ESPOCH Sede Orellana:\n\n1. Revisa las convocatorias vigentes\n2. Verifica que cumples los requisitos\n3. Re√∫ne toda la documentaci√≥n necesaria\n4. Presenta tu solicitud en Bienestar Estudiantil\n5. Espera la evaluaci√≥n del comit√©\n6. Asiste a la entrevista si es requerida\n\n¬øNecesitas ayuda con alg√∫n paso espec√≠fico del proceso?",
            "categoria": "becas"
        },
        {
            "pregunta": "¬øQu√© ayudas econ√≥micas hay disponibles adem√°s de las becas?",
            "respuesta": "Adem√°s de las becas, la ESPOCH Sede Orellana ofrece:\n\n‚Ä¢ Ayuda alimentaria (descuentos en el comedor)\n‚Ä¢ Subsidio de transporte\n‚Ä¢ Programa de trabajo estudiantil\n‚Ä¢ Ayuda para materiales de estudio\n‚Ä¢ Descuentos en servicios m√©dicos\n‚Ä¢ Apoyo para actividades extracurriculares\n\nEstas ayudas tienen requisitos socioecon√≥micos espec√≠ficos.",
            "categoria": "ayudas_economicas"
        },
        {
            "pregunta": "¬øPuedo tener m√°s de una beca al mismo tiempo?",
            "respuesta": "En general, no es posible tener m√∫ltiples becas simult√°neamente en la ESPOCH. Sin embargo:\n\n‚Ä¢ Puedes combinar una beca con ayudas econ√≥micas menores\n‚Ä¢ Algunas ayudas espec√≠ficas (como transporte o alimentaci√≥n) pueden complementar una beca principal\n‚Ä¢ Debes consultar en Bienestar Estudiantil sobre compatibilidades espec√≠ficas\n\nLa prioridad siempre se da a estudiantes que no tienen ning√∫n tipo de apoyo econ√≥mico.",
            "categoria": "becas"
        },
        {
            "pregunta": "¬øQu√© pasa si pierdo mi beca por bajo rendimiento?",
            "respuesta": "Si pierdes tu beca por bajo rendimiento acad√©mico:\n\n‚Ä¢ Tienes un per√≠odo de gracia de un semestre para mejorar\n‚Ä¢ Puedes solicitar tutor√≠a acad√©mica gratuita\n‚Ä¢ Debes presentar un plan de mejoramiento acad√©mico\n‚Ä¢ Puedes volver a aplicar en la siguiente convocatoria si cumples los requisitos\n‚Ä¢ El Departamento de Bienestar Estudiantil te orientar√° sobre alternativas\n\nEs importante comunicarte inmediatamente con Bienestar Estudiantil si tienes dificultades acad√©micas.",
            "categoria": "becas"
        }
    ]
    
    added_count = 0
    for ejemplo in ejemplos_becas:
        if km.add_knowledge(**ejemplo, confianza=1.0, fuente="ejemplos_admin"):
            added_count += 1
    
    print(f"‚úÖ Se a√±adieron {added_count} ejemplos de becas a la base de conocimiento.")
    
    if added_count < len(ejemplos_becas):
        print(f"‚ö†Ô∏è  {len(ejemplos_becas) - added_count} ejemplos ya exist√≠an o no se pudieron a√±adir.")

if __name__ == "__main__":
    try:
        main_menu()
    except KeyboardInterrupt:
        print("\n\n¬°Hasta luego!")
    except Exception as e:
        print(f"\nError inesperado: {e}")
